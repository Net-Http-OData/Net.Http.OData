# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
      - develop
  paths:
    exclude:
      - .editorconfig
      - README.md
      - stylecop.json

# Must be Windows due to the .NET 4.5 build target
pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  buildVersion: '0.0.0'

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=.\TestResults\'

- task: DotNetCoreCLI@2
  displayName: 'dotnet cli report generator'
  inputs:
    command: 'custom'
    custom: 'reportgenerator'
    workingDirectory: 'Net.Http.OData.Tests'
    projects: '**/*Tests.csproj'
    arguments: '"-reports:TestResults\coverage.cobertura.xml" "-targetdir:TestResults\html" -reporttypes:HTML;'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $projVersion = ([xml](Get-Content ".\Net.Http.OData\Net.Http.OData.csproj")) | Select-Xml -XPath "//Project/PropertyGroup[1]/Version"

      Write-Host "##vso[task.setvariable variable=buildVersion]$projVersion"

- script: dotnet pack --no-build -o:$(Build.ArtifactStagingDirectory) -p:PackageVersion="$(buildVersion)-preview$(Build.BuildNumber)"
  displayName: 'dotnet pack (pre)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))

- script: dotnet pack --no-build -o:$(Build.ArtifactStagingDirectory) -p:PackageVersion=$(buildVersion)
  displayName: 'dotnet pack'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet.org (Net.Http.OData)'
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
